PRAGMA foreign_keys = ON;

-- User roles
CREATE TABLE user_role (
  role_id TEXT PRIMARY KEY,
  role_name TEXT NOT NULL,
  role_description TEXT,
  permission_set TEXT
);

-- Main user table
CREATE TABLE user (
  user_id TEXT PRIMARY KEY,
  full_name TEXT NOT NULL,
  email TEXT UNIQUE NOT NULL,
  phone_number TEXT,
  password TEXT,
  user_role TEXT NOT NULL,
  user_status TEXT,
  account_expiry_date TEXT,
  account_creation_date TEXT NOT NULL,
  last_login_timestamp DATETIME,
  FOREIGN KEY (user_role) REFERENCES User_Role(role_id)
);

-- Track changes to user status over time
CREATE TABLE user_status_history (
  status_id INTEGER PRIMARY KEY AUTOINCREMENT,
  user_id TEXT NOT NULL,
  status_type TEXT NOT NULL,
  timestamp DATETIME NOT NULL,
  reason TEXT,
  FOREIGN KEY (user_id) REFERENCES User(user_id)
);

-- Service tiers / queues
CREATE TABLE speed_que (
  queue_id TEXT PRIMARY KEY,
  queue_name TEXT NOT NULL,
  upload_speed_limit INTEGER,
  download_speed_limit INTEGER,
  bandwidth_quota INTEGER
);

-- Track user balances
CREATE TABLE user_balance (
  balance_id INTEGER PRIMARY KEY AUTOINCREMENT,
  user_id TEXT NOT NULL,
  speed_queue_id TEXT NOT NULL,
  bytes_remaining INTEGER,
  monetary_balance DECIMAL(10,2),
  last_update_timestamp DATETIME,
  FOREIGN KEY (user_id) REFERENCES User(user_id),
  FOREIGN KEY (speed_queue_id) REFERENCES Speed_Queue(queue_id)
);

-- Internet sessions
CREATE TABLE internet_session (
  session_id TEXT PRIMARY KEY,
  user_id TEXT NOT NULL,
  ip_address TEXT,
  mac_address TEXT,
  host_name TEXT,
  login_timestamp DATETIME NOT NULL,
  logout_timestamp DATETIME,
  session_length INTEGER,
  speed_queue_id TEXT NOT NULL,
  FOREIGN KEY (user_id) REFERENCES User(user_id),
  FOREIGN KEY (speed_queue_id) REFERENCES Speed_Queue(queue_id)
);

-- Historical payment attempts
CREATE TABLE payment_history (
  history_id INTEGER PRIMARY KEY AUTOINCREMENT,
  user_id TEXT NOT NULL,
  timestamp DATETIME NOT NULL,
  amount_due DECIMAL(10,2),
  amount_paid DECIMAL(10,2),
  payment_status TEXT,
  FOREIGN KEY (user_id) REFERENCES User(user_id)
);

-- Actual payments
CREATE TABLE payment (
  payment_id TEXT PRIMARY KEY,
  user_id TEXT NOT NULL,
  payment_datetime DATETIME NOT NULL,
  payment_method TEXT,
  amount_charged DECIMAL(10,2),
  transaction_ref_number TEXT,
  invoice_number TEXT,
  FOREIGN KEY (user_id) REFERENCES User(user_id)
);

-- Reports generated by the system
CREATE TABLE report (
  report_id TEXT PRIMARY KEY,
  report_type TEXT,
  generation_time DATETIME NOT NULL,
  parameters TEXT
);

-- Map users to reports (many-to-many)
CREATE TABLE user_report_mapping (
  mapping_id INTEGER PRIMARY KEY AUTOINCREMENT,
  user_id TEXT NOT NULL,
  report_id TEXT NOT NULL,
  FOREIGN KEY (user_id) REFERENCES User(user_id),
  FOREIGN KEY (report_id) REFERENCES Report(report_id)
);

-- System status snapshots
CREATE TABLE system_status (
  status_id INTEGER PRIMARY KEY AUTOINCREMENT,
  hotspot_status TEXT,
  local_ip_address TEXT,
  last_refresh_time DATETIME,
  uptime INTEGER,
  restart_count INTEGER,
  last_reboot_time DATETIME,
  software_version TEXT
);

-- Logs of maintenance events
CREATE TABLE maintenance_log (
  log_id INTEGER PRIMARY KEY AUTOINCREMENT,
  status_id INTEGER NOT NULL,
  event_type TEXT,
  timestamp DATETIME NOT NULL,
  description TEXT,
  FOREIGN KEY (status_id) REFERENCES System_Status(status_id)
);

-- Web‐site access per session
CREATE TABLE website_access_log (
  log_id INTEGER PRIMARY KEY AUTOINCREMENT,
  session_id TEXT NOT NULL,
  url TEXT,
  access_time DATETIME NOT NULL,
  blocked BOOLEAN,
  FOREIGN KEY (session_id) REFERENCES Internet_Session(session_id)
);

-- URL‐based restrictions
CREATE TABLE url_restriction (
  restriction_id INTEGER PRIMARY KEY AUTOINCREMENT,
  url TEXT NOT NULL,
  is_blocked BOOLEAN NOT NULL
);

-- Device‐based restrictions
CREATE TABLE device_restriction (
  restriction_id INTEGER PRIMARY KEY AUTOINCREMENT,
  mac_address TEXT NOT NULL,
  reason TEXT
);

-- Traffic data per session
CREATE TABLE traffic_data (
  traffic_id INTEGER PRIMARY KEY AUTOINCREMENT,
  session_id TEXT NOT NULL,
  received_bytes INTEGER,
  transmitted_bytes INTEGER,
  FOREIGN KEY (session_id) REFERENCES Internet_Session(session_id)
);

-- Subscription or service plans
CREATE TABLE service_plan (
  plan_id TEXT PRIMARY KEY,
  plan_name TEXT,
  upload_speed_limit INTEGER,
  bandwidth_quota INTEGER,
  monthly_price DECIMAL(10,2)
);

-- Membership levels (Silver, Gold)
CREATE TABLE membership_level (
  level_id TEXT PRIMARY KEY,
  level_name TEXT,
  description TEXT,
  benefits TEXT,
  speed_amount DECIMAL(10,2),
  plan_id TEXT NOT NULL,
  FOREIGN KEY (plan_id) REFERENCES Service_Plan(plan_id)
);

-- Join table for many-to-many Service_Plan <-> Membership_Level
CREATE TABLE serviceplan_membership (
  plan_id TEXT NOT NULL,
  level_id TEXT NOT NULL,
  PRIMARY KEY (plan_id, level_id),
  FOREIGN KEY (plan_id) REFERENCES Service_Plan(plan_id),
  FOREIGN KEY (level_id) REFERENCES Membership_Level(level_id)
);
